(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{611:function(t,n,a){"use strict";a.r(n);var e=a(6),s=Object(e.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),a("ol",[a("li",[t._v("let和const是JavaScript里相对较新的变量声明方式。 像我们之前提到过的， let在很多方面与var是相似的，但是可以帮助大家避免在JavaScript里常见一些问题。 const是对let的一个增强，它能阻止对一个变量再次赋值。")]),t._v(" "),a("li",[t._v("因为TypeScript是JavaScript的超集，所以它本身就支持let和const。")])]),t._v(" "),a("h1",{attrs:{id:"变量声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量声明"}},[t._v("#")]),t._v(" 变量声明")]),t._v(" "),a("h2",{attrs:{id:"var"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#var"}},[t._v("#")]),t._v(" var")]),t._v(" "),a("ol",[a("li",[t._v("变量 x是定义在"),a("em",[t._v("if语句里面")]),t._v("，但是我们却可以在语句的外面访问它。 这是因为 var声明可以在包含它的函数，模块，命名空间或全局作用域内部任何位置被访问，包含它的代码块对此没有什么影响。 有些人称此为* var作用域或函数作用域*。 函数参数也使用函数作用域。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    function f(shouldInitialize: boolean) {\n        if (shouldInitialize) {\n            var x = 10;\n        }\n        return x;\n    }\n    f(true);  // returns '10'\n    f(false); // returns 'undefined'\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("这些作用域规则可能会引发一些错误。 其中之一就是，多次声明同一个变量并不会报错。这里很容易看出一些问题，里层的for循环会覆盖变量i，因为所有i都引用相同的函数作用域内的变量。 有经验的开发者们很清楚，这些问题可能在代码审查时漏掉，引发无穷的麻烦。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    function sumMatrix(matrix: number[][]) {\n        var sum = 0;\n        for (var i = 0; i < matrix.length; i++) {\n            var currentRow = matrix[i];\n            for (var i = 0; i < currentRow.length; i++) {\n                sum += currentRow[i];\n            }\n        }\n        return sum;\n    }\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("变量的怪异之处")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    for (var i = 0; i < 10; i++) {\n        setTimeout(function() { console.log(i); }, 100 * i);\n    }\n    //结果打印了10个10\n    // setTimeout在若干毫秒后执行一个函数，并且是在for循环结束后。 for循环结束后，i的值为10。 所以当函数被调用的时候，它会打印出 10！\n\n    //通常的解决方法是使用立即执行的函数表达式（IIFE）来捕获每次迭代时i的值\n    for (var i = 0; i < 10; i++) {\n        (function(i) {\n            setTimeout(function() { console.log(i); }, 100 * i);\n        })(i);\n    }\n")])])]),a("h2",{attrs:{id:"let"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#let"}},[t._v("#")]),t._v(" let")]),t._v(" "),a("ol",[a("li",[t._v("当用let声明一个变量，它使用的是词法作用域或块作用域。 不同于使用 var声明的变量那样可以在包含它们的函数外访问，块作用域变量在包含它们的块或for循环之外是不能访问的。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    // 这里我们定义了2个变量a和b。 a的作用域是f函数体内，而b的作用域是if语句块里。\n    function f(input: boolean) {\n        let a = 100;\n        if (input) {\n            // Still okay to reference 'a'\n            let b = a + 1;\n            return b;\n        }\n        // Error: 'b' doesn't exist here\n        return b;\n    }\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("拥有块级作用域的变量的另一个特点是，它们不能在被声明之前读或写。 虽然这些变量始终“存在”于它们的作用域里，但在直到声明它的代码之前的区域都属于 暂时性死区。 它只是用来说明我们不能在 let语句之前访问它们，幸运的是TypeScript可以告诉我们这些信息。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    a++; // illegal to use 'a' before it's declared;\n    let a;\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    //注意一点，我们仍然可以在一个拥有块作用域变量被声明前获取它。 只是我们不能在变量声明前去调用那个函数。 如果生成代码目标为ES2015，现代的运行时会抛出一个错误；然而，现今TypeScript是不会报错的。\n    function foo() {\n        // okay to capture 'a'\n        return a;\n    }\n    // 不能在'a'被声明前调用'foo'\n    // 运行时应该抛出错误\n    foo();\n    let a;\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("同作用域 var 可以多次声明，而let只能一次，")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    function f(x) {\n        var x;\n        var x;\n        if (true) {\n            var x;\n        }\n    }\n\n    function f(x) {\n        let x = 100; // error: interferes with parameter declaration\n    }\n    function g() {\n        let x = 100;\n        var x = 100; // error: can't have both declarations of 'x'\n    }\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[t._v("块级作用域变量的获取")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    //当let声明出现在循环体里时拥有完全不同的行为。 不仅是在循环里引入了一个新的变量环境，而是针对 每次迭代都会创建这样一个新作用域。 这就是我们在使用立即执行的函数表达式时做的事，所以在 setTimeout例子里我们仅使用let声明就可以了。\n    for (let i = 0; i < 10 ; i++) {\n        setTimeout(function() {console.log(i); }, 100 * i);\n    }\n    // 结果输出0--9\n")])])]),a("h2",{attrs:{id:"const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#const"}},[t._v("#")]),t._v(" const")]),t._v(" "),a("ol",[a("li",[t._v("它们与let声明相似，但是就像它的名字所表达的，它们被赋值后不能再改变。 换句话说，它们拥有与 let相同的作用域规则，但是不能对它们重新赋值。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    const numLivesForCat = 9;\n    const kitty = {\n        name: "Aurora",\n        numLives: numLivesForCat,\n    }\n\n    // Error\n    kitty = {\n        name: "Danielle",\n        numLives: numLivesForCat\n    };\n\n    // success   \n    kitty.name = "Rory";\n    kitty.name = "Kitty";\n    kitty.name = "Cat";\n    kitty.numLives--;\n')])])]),a("h1",{attrs:{id:"解构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解构"}},[t._v("#")]),t._v(" 解构")]),t._v(" "),a("h2",{attrs:{id:"解构数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解构数组"}},[t._v("#")]),t._v(" 解构数组")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    let input = [1, 2];\n    let [first, second] = input;\n    console.log(first); // outputs 1\n    console.log(second); // outputs 2\n\n    // 这创建了2个命名变量 first 和 second。 相当于使用了索引，但更为方便：\n    first = input[0];\n    second = input[1];\n\n    // 解构作用于已声明的变量会更好：替换变量值\n    [first, second] = [second, first];\n\n    // 作用于函数参数：\n    function f([first, second]: [number, number]) {\n        console.log(first);\n        console.log(second);\n    }\n    f(input);\n\n    // 可以在数组里使用...语法创建剩余变量\n    let [first, ...rest] = [1, 2, 3, 4];\n    console.log(first); // outputs 1\n    console.log(rest); // outputs [ 2, 3, 4 ]\n\n    // 也可以这么定义\n    let [, second, , fourth] = [1, 2, 3, 4];\n")])])]),a("h2",{attrs:{id:"解构对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解构对象"}},[t._v("#")]),t._v(" 解构对象")]),t._v(" "),a("p",[t._v("1.解构对象")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    // 这通过 o.a and o.b 创建了 a 和 b 。 注意，如果你不需要 c 你可以忽略它。\n    let o = {\n        a: "foo",\n        b: 12,\n        c: "bar"\n    };\n    let { a, b } = o;\n\n    //就像数组解构，你可以用没有声明的赋值\n    ({ a, b } = { a: "baz", b: 101 });\n\n    // 你可以在对象里使用...语法创建剩余变量\n    let { a, ...passthrough } = o;\n    let total = passthrough.b + passthrough.c.length;\n')])])]),a("div",{staticStyle:{color:"red"}},[t._v("注意，我们需要用括号将它括起来，因为Javascript通常会将以 { 起始的语句解析为一个块")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("属性重命名")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    // 可以给属性以不同的名字：\n    let { a: newName1, b: newName2 } = o;\n    //这里的语法开始变得混乱。 你可以将 a: newName1 读做 "a 作为 newName1"。 方向是从左到右，好像你写成了以下样子：\n    let newName1 = o.a;\n    let newName2 = o.b;\n    //令人困惑的是，这里的冒号不是指示类型的。 如果你想指定它的类型， 仍然需要在其后写上完整的模式。\n    let {a, b}: {a: string, b: number} = o;\n')])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("默认值")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    //默认值可以让你在属性为 undefined 时使用缺省值 , 即使 b 为 undefined ， keepWholeObject 函数的变量 wholeObject 的属性 a 和 b 都会有值\n    function keepWholeObject(wholeObject: { a: string, b?: number }) {\n        let { a, b = 1001 } = wholeObject;\n    }\n")])])]),a("h2",{attrs:{id:"函数声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数声明"}},[t._v("#")]),t._v(" 函数声明")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    //解构也能用于函数声明。 看以下简单的情况：\n    type C = { a: string, b?: number }\n    function f({ a, b }: C): void {\n        // ...\n    }\n\n    // 但是，通常情况下更多的是指定默认值，解构默认值有些棘手。 首先，你需要在默认值之前设置其格式。\n    function f({ a="", b=0 } = {}): void {\n        // ...\n    }\n    f();\n\n    //其次，你需要知道在解构属性上给予一个默认或可选的属性用来替换主初始化列表。 要知道 C 的定义有一个 b 可选属性\n    function f({ a, b = 0 } = { a: "" }): void {\n        // ...\n    }\n    f({ a: "yes" }); // ok, default b = 0\n    f(); // ok, default to {a: ""}, which then defaults b = 0\n    f({}); // error, \'a\' is required if you supply an argument\n')])])]),a("div",{staticStyle:{color:"red"}},[t._v("要小心使用解构。 从前面的例子可以看出，就算是最简单的解构表达式也是难以理解的。 尤其当存在深层嵌套解构的时候，就算这时没有堆叠在一起的重命名，默认值和类型注解，也是令人难以理解的。 解构表达式要尽量保持小而简单。 你自己也可以直接使用解构将会生成的赋值表达式。")]),t._v(" "),a("h2",{attrs:{id:"展开"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#展开"}},[t._v("#")]),t._v(" 展开")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    // 展开操作符正与解构相反。 它允许你将一个数组展开为另一个数组，或将一个对象展开为另一个对象。这会令bothPlus的值为[0, 1, 2, 3, 4, 5]。 展开操作创建了 first和second的一份浅拷贝。 它们不会被展开操作所改变。\n    let first = [1, 2];\n    let second = [3, 4];\n    let bothPlus = [0, ...first, ...second, 5];\n\n    // 展开对象：有相同属性时注意是先展开还是后展开\n    let defaults = { food: "spicy", price: "$$", ambiance: "noisy" };\n    let search = { ...defaults, food: "rich" }; \n    console.log(search) // { food: "rich", price: "$$", ambiance: "noisy" } 其中food的值为 rich 、\n    // or  defaults里的food属性会重写food: "rich"，在这里这并不是我们想要的结果。\n    let defaults = { food: "spicy", price: "$$", ambiance: "noisy" };\n    let search = { food: "rich", ...defaults };\n    console.log(search) // { food: "spicy", price: "$$", ambiance: "noisy" } 其中food的值为 spicy 、\n    \n    // 对象展开还有其它一些意想不到的限制，大体上是说当你展开一个对象实例时，你会丢失其方法：\n    class C {\n        p = 12;\n        m() {\n        }\n    }\n    let c = new C();\n    let clone = { ...c };\n    clone.p; // ok\n    clone.m(); // error! 这里报错，是因为展开丢失了方法\n')])])])])}),[],!1,null,null,null);n.default=s.exports}}]);